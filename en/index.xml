<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Davydson Verri Blog</title>
        <link>https://davys.tech/en/</link>
        <description>20&#43; Years | Software Architect | Principal Engineer</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 17 Apr 2025 06:13:33 -0300</lastBuildDate>
            <atom:link href="https://davys.tech/en/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>How to Set Up RabbitMQ with Docker Compose: Queues, DLQs, Plugins, and Security</title>
    <link>https://davys.tech/en/posts/rabbitmq-setup-with-compose-queue-exchanges-dlq-plugins-using-docker-compose/</link>
    <pubDate>Thu, 17 Apr 2025 06:13:33 -0300</pubDate>
    <author>Davydson Verri</author>
    <guid>https://davys.tech/en/posts/rabbitmq-setup-with-compose-queue-exchanges-dlq-plugins-using-docker-compose/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/rabbitmq-setup-with-compose-queue-exchanges-dlq-plugins-using-docker-compose.webp" referrerpolicy="no-referrer">
            </div><h2 id="fa-regular-fa-compass-intro"><i class="fa-regular fa-compass" aria-hidden="true"></i>&nbsp;Intro</h2>
<p>Recently, I needed to run a <strong>RabbitMQ</strong> instance in my local environment. The challenge was to faithfully replicate the production environment, including the configuration of <strong>virtual hosts, exchanges, queues, routing keys, bindings, users, permissions, and plugins</strong>, so I could start development without worrying about the infrastructure.</p>
<p>To solve this using Docker, I created a <code>docker-compose</code> file that spins up a RabbitMQ instance already configured with all the resources the application needs.<br>
This way, I can realistically simulate the production environment and ensure the application works correctly during development.</p>]]></description>
</item>
</channel>
</rss>
